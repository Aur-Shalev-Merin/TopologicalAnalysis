# Import necessary packages
using TopologicalAnalysis
using CSV
using DataFrames
using Plots
using Distributed
using Clustering           # For K-means clustering
using MultivariateStats    # For MDS
using StatsBase            # For color palettes

# Add processes for parallel computation
addprocs(12)
println("Number of workers: ", nworkers())

@everywhere using TopologicalAnalysis

save_directory = "./"

# Function to read data from CSV and perform K-means clustering
using CSV
using DataFrames
using Clustering  # For K-means clustering
using Plots

# Function to read data from CSV and perform K-means clustering
function perform_kmeans_clustering(file_path::String, k::Int)
    # Read data from CSV file, specifying the types for accurate parsing
    df = CSV.read(file_path, DataFrame; types=Dict(:x=>Float64, :y=>Float64, :z=>Float64))

    # Check for missing values


    println("Total number of data points in CSV file: ", nrow(df))
    println("Column types: ", eltype.(eachcol(df)))

    # Extract x, y, z columns as a matrix
    X = Matrix(df[:, [:x, :y, :z]])

    # Perform K-means clustering
    kmeans_result = kmeans(X', k; maxiter=100, display=:none)

    # Get the cluster labels for each point
    labels = kmeans_result.assignments

    # Get the coordinates of the cluster centers
    centers = kmeans_result.centers'

    # Visualize the clusters in 3D
    scatter3d(X[:, 1], X[:, 2], X[:, 3], zcolor=labels, title="K-means Clustering", xlabel="X", ylabel="Y", zlabel="Z", legend=false)
    scatter3d!(centers[:, 1], centers[:, 2], centers[:, 3], marker=:star, ms=10, label="Centers")
end

# Example usage
file_path = "examples/centers_of_mass.csv"
k = 3  # Number of clusters
perform_kmeans_clustering(file_path, k)

# Example usage
k = 5  # Adjust the number of clusters as needed
file_path = "C:/Users/aur_m/OneDrive - UCB-O365/School/Bee Swarm Research/Code/TopologicalAnalysis/examples/centers_of_mass.csv"  # Replace with your CSV file path

# Generate motifs for each cluster and get the clustering result
cluster_motif_arrays, pos, kmeans_result, valid_cluster_ids = generate_clustered_motifs(file_path, k)

# Check if we have any valid clusters
if isempty(cluster_motif_arrays)
    error("No clusters with sufficient points to perform Delaunay triangulation.")
end

# Compute the flip graph using motifs from valid clusters
flip_graph_clusters = compute_flip(cluster_motif_arrays...; restrict=0, thresh=0.5)

# Compute distance matrix between clusters
d = calculate_distance_matrix(flip_graph_clusters, cluster_motif_arrays, optimal_transport=false)

# Optionally, save the results
using CSV, DataFrames
cluster_labels = ["Cluster_$(id)" for id in valid_cluster_ids]
CSV.write(save_directory*"cluster_distance_matrix.csv", DataFrame(d, cluster_labels))

# Visualization Section

## 1. Visualize the clusters in the original data space
function visualize_clusters_in_data_space(pos, kmeans_result, valid_cluster_ids)
    # Prepare data for plotting
    x = [p[1] for p in pos]
    y = [p[2] for p in pos]
    z = [p[3] for p in pos]
    assignments = kmeans_result.assignments

    # Define a color palette
    palette = distinguishable_colors(length(valid_cluster_ids))

    # Create a mapping from original cluster IDs to valid cluster indices
    cluster_id_map = Dict(valid_cluster_ids[i] => i for i in 1:length(valid_cluster_ids))

    # Plotting
    plt = scatter3d()
    for p_idx in 1:length(pos)
        cluster_id = assignments[p_idx]
        if cluster_id in valid_cluster_ids
            color_idx = cluster_id_map[cluster_id]
            scatter3d!(plt, x[p_idx], y[p_idx], z[p_idx], markersize=5, markercolor=palette[color_idx], label="")
        else
            # Plot points from skipped clusters in gray
            scatter3d!(plt, x[p_idx], y[p_idx], z[p_idx], markersize=5, markercolor=:gray, label="")
        end
    end

    plt.title = "Clusters in Data Space"
    plt.xlabel = "X"
    plt.ylabel = "Y"
    plt.zlabel = "Z"
    # Save the plot
    savefig(plt, save_directory * "clusters_in_data_space.png")
end

# Call the function to visualize clusters in data space
visualize_clusters_in_data_space(pos, kmeans_result, valid_cluster_ids)

## 2. Visualize the clusters using MDS
function visualize_clusters_in_data_space(pos, kmeans_result, valid_cluster_ids)
    # Prepare data for plotting
    x = [p[1] for p in pos]
    y = [p[2] for p in pos]
    z = [p[3] for p in pos]
    assignments = kmeans_result.assignments

    # Map cluster IDs to group IDs, using 0 for skipped clusters
    group_ids = [cluster_id in valid_cluster_ids ? cluster_id : 0 for cluster_id in assignments]

    # Define a color palette
    num_groups = length(valid_cluster_ids) + 1  # +1 for skipped clusters
    palette = distinguishable_colors(num_groups)

    # Plotting
    plt = scatter3d(
        x, y, z;
        group=group_ids,
        markersize=5,
        palette=palette,
        legend=false,
        title="Clusters in Data Space",
        xlabel="X",
        ylabel="Y",
        zlabel="Z"
    )

    # Save the plot
    savefig(plt, save_directory * "clusters_in_data_space.png")
end



# Call the function to visualize clusters with MDS
visualize_clusters_with_mds(d, valid_cluster_ids)
